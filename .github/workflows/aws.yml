# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the main branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Deploy to Amazon ECS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: eu-central-1
  ECR_REPOSITORY: nodejs-helm-demo           # set this to your Amazon ECR repository name

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Read node from package.json
      uses: culshaw/read-package-node-version-actions@v1
      id: package-node-version

#    - name: Get short SHA
#      id: slug
#      run: echo "::set-output name=sha4::$(echo ${GITHUB_SHA} | cut -c1-4)"

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ steps.package-node-version.outputs.version }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

#    - name: Update Image Version in the related HelmChart values.yaml
#      uses: fjogeleit/yaml-update-action@master
#      with:
#        valueFile: 'chart/values.yaml'
#        propertyPath: 'image.tag'
#        value: '${{ steps.package-node-version.outputs.version }}'
#        branch: main
#        updateFile: true
#        message: 'Update Image Version to ${{ steps.package-node-version.outputs.version }}'

#    - name: Update chart version
#      uses: fjogeleit/yaml-update-action@master
#      with:
#        valueFile: 'chart/Chart.yaml'
#        propertyPath: 'version'
#        value: '${{ steps.package-node-version.outputs.version }}'
#        branch: main
#        updateFile: true
#        message: 'Update Image Version to ${{ steps.package-node-version.outputs.version }}'
#
#    - name: Update chart app version
#      uses: fjogeleit/yaml-update-action@master
#      with:
#        valueFile: 'chart/Chart.yaml'
#        propertyPath: 'appVersion'
#        value: '${{ steps.package-node-version.outputs.version }}'
#        branch: main
#        updateFile: true
#        message: 'Update Image Version to ${{ steps.package-node-version.outputs.version }}'
